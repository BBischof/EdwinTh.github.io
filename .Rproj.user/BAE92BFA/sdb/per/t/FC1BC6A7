{
    "collab_server" : "",
    "contents" : "---\nlayout: post\ncategories: blog\ntitle: Designing our bathroom with R\nbase-url: https://EdwinTh.github.io\ntags: [random pattern, bathroon design, R, geom_tile]\n---\n\nR has been an indispensable tool since I started working with it about five years ago. Of course in my day job as a data scientist I couldn't live without it, but it also proved to be a great aid in private life. Recently we bought our first house and R came to the rescue several times in the process. We compared the impact of different mortgages on our finances in ten and twenty years time and I kept an eye on our spending through a Shiny app (I'll admit the latter would have been less time consuming if I would have done it in Excel, like normal people).\n\nI would never had expected that R would also be the go-to tool for decorating our bathrooms. When looking for inspiration online and in showrooms we came across many ugly and boring examples. Just when we were about to settle for a design like this \n![Ugly bathroom](/images/2016-08-01/ugly_bathroom.jpg)\n\nwe came to the luminous idea to create a random pattern from a few colors we liked. It is very difficult for human beings to produce a random pattern, since we tend to avoid clutters of the same color. Of course R's random number generator does not suffer from this. Turning the random pattern into a nice design is (of course!) done with `geom_tile` from `ggplot2`. It is funny how you keep underestimating randomness, even when you work with data daily. I was looking for a nicely scattered design of the four colors we selected, rather we got *Tetris-on-steroids patterns* like this\n![True random](/images/2016-08-01/true_random.jpg)\n\nNature needed to be a bit constrained in order to produce the design we were after. An adjustment was made to the function by adding a parameter for the maximum number of adjacent tiles of the same color. Allowing for two adjacent tiles of the same color gave us a very nice result.\n![Bathroom](/images/2016-08-01/bathroom.jpg)\n\nHere are the functions that were used, the first two are helpers for the main function. Go ahead and redecorate your own bathroom!\n\n```{r, warning = FALSE, return = FALSE, message= FALSE}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(magrittr)\n\n# helper function that checks for the next tile to be sampled if there\n# are any colors that should be excluded because the max adjacent was\n# reached either vertically or horizontally\ncheck_colors <- function(plot_data,\n                         cur_width,\n                         cur_height,\n                         m_a){\n  if(cur_height > m_a){\n    colors_height <-\n      plot_data[Height %in% (cur_height-(m_a)):(cur_height-1) &\n                  Width == cur_width, color] %>% unique\n  } else {\n    \n    colors_height <- NULL\n  }\n  \n  if(cur_width > m_a){\n    colors_width <-\n      plot_data[Width %in% (cur_width-(m_a)):(cur_width-1) &\n                  Height == cur_height, color] %>% unique\n  } else {\n    colors_width <- NULL\n  }\n  \n  if(length(colors_height) > 1) colors_height <- NULL\n  if(length(colors_width) > 1) colors_width <- NULL\n  exclude <- c(colors_height, colors_width)\n  if(length(exclude) == 0) exclude <- 0\n  \n  return(exclude)\n}\n\n# helper function that samples a tile color from a vector with remaining tiles\n# excluding a color if necesarry. Returns the sample color and the vector with\n# remaining colors for the next iteration.\nsample_color <- function(exclude = 0,\n                         cts){\n  if(cts %>% is_in(exclude) %>% all){\n    stop('There is no valid solution due to adjacency constraint, please try again')\n  }\n  \n  valid_color <- FALSE\n  while(valid_color == FALSE){\n    color <- sample(cts, 1)\n    if(color %>% is_in(exclude) %>% not) {\n      valid_color <- TRUE\n      return_list <- list(color = color,\n                          cts =\n                            cts[-((cts == color) %>% which.max)])\n    }\n  }\n  return(return_list)\n}\n\n# This function will generate a random pattern of tiles.\ntiles_pattern <- function(\n  colors         = c('darkblue', 'cyan3', 'lightblue1', 'white'),   # vector with the colors\n  nr_of_each_col = rep(40, 4),     # prevalence of each color in colors vector\n  nr_height      = 8, # nr of tiles in vertical direction\n  nr_width       = 20, # nr of tiles in horizontal directions\n  max_adjacent   = 2)  # maximimum nr of adjacent tiles of the same color\n{\n  \n  if(length(colors) != length(nr_of_each_col)){\n    stop('nr_of_each_col vector should be same length as the colors vector')\n  }\n  if(sum(nr_of_each_col) != nr_height * nr_width){\n    stop('Sum nr_of_each_col should equal nr_height * nr_width')\n  }\n  \n  plot_data <- expand.grid(1:nr_height, 1:nr_width) %>% as.data.table\n  colnames(plot_data) <- c('Height', 'Width')\n  plot_data$color <- integer(nrow(plot_data))\n  \n  colors_to_sample <- rep(1:length(colors), nr_of_each_col)\n  \n  for(i in 1:(nr_width)){\n    for(j in 1:nr_height){\n      exclude_iter     <- check_colors(plot_data, i, j, max_adjacent)\n      color_iter       <- sample_color(exclude_iter, colors_to_sample)\n      plot_data[Height == j & Width == i, color := color_iter$color]\n      colors_to_sample <- color_iter$cts\n    }\n  }\n  \n  plot_data[ ,color := color %>% as.character]\n  \n  # build the plot\n  ggplot(plot_data, aes(Width, Height)) +\n    geom_tile(aes(fill = color), col = 'grey') +\n    scale_fill_manual(values = c('1' = colors[1],\n                                 '2' = colors[2],\n                                 '3' = colors[3],\n                                 '4' = colors[4])) +\n    xlab('') +\n    ylab('') +\n    guides(fill = FALSE) +\n    theme_bw() +\n    theme(\n      plot.background = element_blank()\n      ,panel.grid.major = element_blank()\n      ,panel.grid.minor = element_blank()\n      ,panel.border = element_blank()\n      ,axis.ticks.x = element_blank()\n      ,axis.ticks.y = element_blank()\n      ,axis.text.x = element_blank()\n      ,axis.text.y = element_blank()\n    ) +\n    coord_fixed()\n}\n```\n\n",
    "created" : 1480194226720.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "117655284",
    "id" : "FC1BC6A7",
    "lastKnownWriteTime" : 1480194365,
    "last_content_update" : 1480194365583,
    "path" : "~/Documents/Site/_source/2016-08-01-bathroom-with-r.Rmd",
    "project_path" : "_source/2016-08-01-bathroom-with-r.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}